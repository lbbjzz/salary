<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zsc.salary.mapper.SalaryMapper">
    <update id="updateSalaryStatus" parameterType="Map">
        UPDATE salary SET status = 0 WHERE DATE_FORMAT( create_time, '%Y-%m' ) = #{time}
            AND employee_id in
        <foreach collection="employeeList" item="employee" open="(" separator="," close=")">
            #{employee.id}
        </foreach>
    </update>

    <select id="listSalaryVo" resultType="com.zsc.salary.model.vo.SalaryVo" parameterType="Map">
        SELECT
            s.*,
            i.*,
            e.heating_subsidy,
            e.name employee_name,
            j.id job_id,
            j.name job_name,
            d.id dept_id,
            d.name dept_name
        FROM
            salary s,
            employee e,
            job j,
            dept d,
            import i
        WHERE
            s.employee_id = e.id
          AND s.import_id = i.id
          AND e.job_id = j.id
          AND e.status = 1
          AND e.dept_id = d.id
        <choose>
            <when test="deptId != null and time == null">
                AND d.id = #{deptId}
            </when>
            <when test="time != null and deptId == null">
                AND DATE_FORMAT(s.create_time, '%Y-%m') = #{time}
            </when>
            <when test="time != null and deptId != null">
                AND d.id = #{deptId}
                AND DATE_FORMAT(s.create_time, '%Y-%m') = #{time}
            </when>
        </choose>
    </select>

    <select id="listSalaryVoDetail" resultType="com.zsc.salary.model.vo.SalaryVo" parameterType="Map">
        SELECT
        s.*,
        i.*,
        e.heating_subsidy,
        e.name employee_name,
        j.id job_id,
        j.name job_name,
        d.id dept_id,
        d.name dept_name
        FROM
        salary s,
        employee e,
        job j,
        dept d,
        import i
        WHERE
        s.employee_id = e.id
        AND s.import_id = i.id
        AND e.job_id = j.id
        AND e.status = 1
        AND e.dept_id = d.id
        <choose>
            <when test="beginDate != null and endDate != null and deptName != null">
                AND DATE_FORMAT(s.create_time, '%Y-%m') &gt;= #{beginDate}
                AND DATE_FORMAT(s.create_time, '%Y-%m') &lt;= #{endDate}
                AND d.name LIKE CONCAT('%', #{deptName}, '%')
            </when>
            <when test="beginDate != null and deptName != null">
                AND DATE_FORMAT(s.create_time, '%Y-%m') = #{beginDate}
                AND d.name LIKE CONCAT('%', #{deptName}, '%')
            </when>
            <when test="beginDate != null and endDate != null">
                AND DATE_FORMAT(s.create_time, '%Y-%m') &gt;= #{beginDate}
                AND DATE_FORMAT(s.create_time, '%Y-%m') &lt;= #{endDate}
            </when>
            <when test="beginDate != null">
                AND DATE_FORMAT(s.create_time, '%Y-%m') = #{beginDate}
            </when>
            <when test="deptName != null">
                AND d.name LIKE CONCAT('%', #{deptName}, '%')
            </when>
        </choose>
    </select>

    <select id="getDeptMonthlySalaryStatById" parameterType="Map" resultMap="salaryStat">
        select
            d.id deptId,
            d.name deptName,
            #{queryDate} queryDate,
            SUM(s.net_pay) sumSalary,
            MAX(s.net_pay) maxSalary,
            MIN(s.net_pay) minSalary,
            AVG(s.net_pay) avgSalary
        from
            salary s,
            employee e,
            dept d
        where
            DATE_FORMAT(s.create_time, '%Y-%m') = #{queryDate}
            and
            s.employee_id = e.id
            and
            e.dept_id = #{deptId}
            and
            e.dept_id = d.id
    </select>

    <select id="getDeptYearlySalaryStatById" parameterType="Map" resultMap="salaryStat">
        select
            d.id deptId,
            d.name deptName,
            DATE_FORMAT(#{dateTime}, '%Y') queryDate,
            SUM(s.net_pay) sumSalary,
            MAX(s.net_pay) maxSalary,
            MIN(s.net_pay) minSalary,
            AVG(s.net_pay) avgSalary
        from
            salary s,
            employee e,
            dept d
        where
            DATE_FORMAT(s.create_time, '%Y') = #{queryDate}
            and
            s.employee_id = e.id
            and
            e.dept_id = #{deptId}
            and
            e.dept_id = d.id
    </select>
    <resultMap id="salaryStat" type="com.zsc.salary.model.vo.SalaryDeptStatVO">
        <result property="deptId" column="deptId"/>
        <result property="deptName" column="deptName"/>
        <result property="queryDate" column="queryDate"/>
        <result property="sumSalary" column="sumSalary"/>
        <result property="maxSalary" column="maxSalary"/>
        <result property="minSalary" column="minSalary"/>
        <result property="avgSalary" column="avgSalary"/>
    </resultMap>

    <select id="getCompMonthlySalaryStat" parameterType="map" resultMap="companySalaryStat">
        SELECT
            #{queryDate} queryDate,
	        SUM(s.net_pay) sumSalary,
	        max(s.net_pay) maxSalary,
	        MIN(s.net_pay) minSalary,
	        AVG(s.net_pay) avgSalary
        FROM
	        salary s,
	        employee e
        WHERE
	        s.employee_id = e.id
	        AND
	        DATE_FORMAT(s.create_time, '%Y-%m') = #{queryDate}
    </select>

    <select id="getCompYearlySalaryStat" parameterType="map" resultMap="companySalaryStat">
        SELECT
            #{queryDate} queryDate,
	        SUM(s.net_pay) sumSalary,
	        max(s.net_pay) maxSalary,
	        MIN(s.net_pay) minSalary,
	        AVG(s.net_pay) avgSalary
        FROM
	        salary s,
	        employee e
        WHERE
	        s.employee_id = e.id
	        AND
	        DATE_FORMAT(s.create_time, '%Y') = #{queryDate}
    </select>

    <resultMap id="companySalaryStat" type="map">
        <result property="queryDate" column="queryDate"/>
        <result property="sumSalary" column="sumSalary"/>
        <result property="maxSalary" column="maxSalary"/>
        <result property="minSalary" column="minSalary"/>
        <result property="avgSalary" column="avgSalary"/>
    </resultMap>

    <select id="getEmployeeSalaryStat" resultMap="EmployeeSalary" parameterType="int">
        SELECT
	        e.id employeeId,
	        e.name employeeName,
	        SUM(s.basic_salary) basicSalaryTotal,
	        SUM(s.company_endowment_insurance + s.personal_endowment_insurance) endowmentInsuranceTotal,
	        SUM(s.company_accumulation_fund + s.personal_accumulation_fund) accumulationFundTotal,
	        SUM(s.company_medical_insurance + s.personal_medical_insurance) medicalInsuranceTotal,
	        SUM(s.sick_leave_deduction) sickLeaveDeductionTotal,
	        SUM(s.personal_leave_deduction) personalLeaveDeductionTotal,
	        SUM(s.late_deduction) lateDeductionTotal,
	        SUM(s.overtime_pay) overtimePayTotal
        FROM
	        employee e,
	        salary s
        WHERE
	        s.employee_id = e.id
	        AND
	        s.employee_id = #{employeeId}
    </select>

    <resultMap id="EmployeeSalary" type="com.zsc.salary.model.vo.EmployeeSalaryVO">
        <result property="employeeId" column="employeeId"/>
        <result property="employeeName" column="employeeName"/>
        <result property="baseSalaryTotal" column="baseSalaryTotal"/>
        <result property="endowmentInsuranceTotal" column="endowmentInsuranceTotal"/>
        <result property="accumulationFundTotal" column="accumulationFundTotal"/>
        <result property="medicalInsuranceTotal" column="medicalInsuranceTotal"/>
        <result property="sickLeaveDeductionTotal" column="sickLeaveDeductionTotal"/>
        <result property="personalLeaveDeductionTotal" column="personalLeaveDeductionTotal"/>
        <result property="lateDeductionTotal" column="lateDeductionTotal"/>
        <result property="overtimePayTotal" column="overtimePayTotal"/>
    </resultMap>



    <insert id="insertEmployeeSalary">
        INSERT INTO salary (
            employee_id,
            import_id,
            basic_salary,
            personal_endowment_insurance,
            company_endowment_insurance,
            personal_unemployment_insurance,
            personal_accumulation_fund,
            company_accumulation_fund,
            personal_medical_insurance,
            company_medical_insurance,
            personal_income_tax,
            sick_leave_deduction,
            personal_leave_deduction,
            late_deduction,
            overtime_pay,
            back_pay,
            net_pay,
            should_pay,
            status,
            create_time,
            modify_time
        )
        VALUES
        <foreach collection ="salaryList" item="salary" separator =",">
            (
             #{salary.employeeId}, #{salary.importId}, #{salary.basicSalary},
            #{salary.personalEndowmentInsurance}, #{salary.companyEndowmentInsurance}, #{salary.personalUnemploymentInsurance},
            #{salary.personalAccumulationFund}, #{salary.companyAccumulationFund}, #{salary.personalMedicalInsurance},
            #{salary.companyMedicalInsurance}, #{salary.personalIncomeTax}, #{salary.sickLeaveDeduction},
            #{salary.personalLeaveDeduction}, #{salary.lateDeduction}, #{salary.overtimePay},
            #{salary.backPay}, #{salary.netPay}, #{salary.shouldPay},#{salary.status}, NOW(), NOW()
             )
        </foreach >
    </insert>
</mapper>
